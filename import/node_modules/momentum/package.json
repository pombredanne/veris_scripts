{
  "name": "momentum",
  "description": "Basic vector operations",
  "version": "0.1.3",
  "main": "index.js",
  "scripts": {
    "test": "mocha",
    "prepublish": "npm test"
  },
  "dependencies": {
    "totemizer": "~0.0.5",
    "rationals": "~0.1.2"
  },
  "devDependencies": {
    "mocha": "*",
    "expect.js": "*"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/ashnur/momentum.git"
  },
  "bugs": {
    "url": "https://github.com/ashnur/momentum/issues"
  },
  "testling": {
    "files": "test/*.js",
    "browsers": [
      "iexplore/6.0",
      "iexplore/7.0",
      "iexplore/8.0",
      "iexplore/9.0",
      "iexplore/10.0",
      "chrome/4.0",
      "chrome/23.0",
      "firefox/3.0",
      "firefox/17.0",
      "opera/10.0",
      "opera/12.0",
      "safari/5.0.5",
      "safari/5.1"
    ],
    "harness": "mocha"
  },
  "keywords": [
    "vectors",
    "vector operations"
  ],
  "author": {
    "name": "ashnur"
  },
  "license": "DAFUQ",
  "readmeFilename": "README.md",
  "readme": "# momentum\n\nBasic vector operations over the rational numbers.\n\n# Support\n[![browser support](https://ci.testling.com/ashnur/momentum.png)](https://ci.testling.com/ashnur/momentum)\n\n# Examples\nwhere `m.r` is the [rationals](https://github.com/ashnur/rationals/) used by momentum\n```\nvar m = require('momentum');\nm([1])[0] === m.r(1); // true\n```\n\nwhile in the case of *rationals* it made sense to keep direct equality between the\ncreated objects, I think this is not the case with momentumi.\nHowever this might change some time in the future.\n\nAnother issue is that no matter how much I wish, there isn't a good, widely supported\nway to subclass array (not until es6 is widely supported). The workarounds available\nkinda create more problems than they solve, so after a day of thinking I went\nin the minimalist direction. This also means, that while momentum methods expect\narrays and scalars with add, sub, scale, disperse, dot methods on them, the module's\nuser should provide these methods.\n\nProbably worth to mention that the API gives you easy solution to this:\n\n```\nvar m = require('momentum');\nvar equal = require('deep-equal');\nvar r = m.r;\nequal(m.disperse(m([1,4,7,9,16]), r(12)), m([r(1,12),r(1,3),r(7,12),r(3,4),r(4,3)])); // true\n```\n\n# API\nall methods on momentum objects  will return an array of rationals\nwith the exception of `.dot`, which will return a single rational\n\n#### Casting an array of integers to rationals\n##### `momentum()`\n```\nm([3])[0].toString()  // 3/1\n```\n\n#### Casting an integer to a rational\n##### `momentum.r()`\n```\nm.r(5).toString()  // 5/1\n```\n\n#### Scaling up\n##### `scale`\n```\nm.scale(m([1,3,5]), m.r(7))  // [7/1,21/1,35/1]\n```\n\n#### Scaling down\n##### `disperse`\n```\nm.disperse(m([1,3,5]), m.r(9)) // [1/9,1/3,5/9]\n```\n\n#### Addition\n##### `add`\n```\nm.add(m([1,3,5]), m([2,4,6])) // [3/1,7/1,11/1]\n```\n\n#### Subtraction\n##### `sub`\n```\nm.sub(m([3,7,11]), m([2,4,6])) // [1/1,3/1,5/1]\n```\n\n#### Dot product\n##### `dot`\n```\nm.dot(m([1,3,5]), m([7,11,13])) // 105/1\n```\n\n#### Cross product\n##### `cross`\n```\nm.cross(m([1,3,5]), m([7,11,13])) // [-16/1, 22/1, -10/1]\n```\n\n# Install\n```\nnpm install momentum\n```\n\n\n**You can use it in the browser with [browserify](http://browserify.org/)**\n\n",
  "_id": "momentum@0.1.3",
  "dist": {
    "shasum": "7f917663f97e83b9c6e7645a17ecfd0bb2ed4c3a",
    "tarball": "http://registry.npmjs.org/momentum/-/momentum-0.1.3.tgz"
  },
  "_from": "momentum@*",
  "_npmVersion": "1.3.8",
  "_npmUser": {
    "name": "ashnur",
    "email": "ashnur@gmail.com"
  },
  "maintainers": [
    {
      "name": "ashnur",
      "email": "ashnur@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "7f917663f97e83b9c6e7645a17ecfd0bb2ed4c3a",
  "_resolved": "https://registry.npmjs.org/momentum/-/momentum-0.1.3.tgz"
}
