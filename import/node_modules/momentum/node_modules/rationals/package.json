{
  "name": "rationals",
  "description": "rational numbers with operations",
  "version": "0.1.9",
  "main": "index.js",
  "scripts": {
    "test": "mocha",
    "prepublish": "npm test"
  },
  "dependencies": {
    "totemizer": "~0.0.4",
    "biginteger": "~1.0.1",
    "viral": "~0.0.4"
  },
  "devDependencies": {
    "mocha": "*",
    "expect.js": "*"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/ashnur/rationals.git"
  },
  "bugs": {
    "url": "https://github.com/ashnur/rationals/issues"
  },
  "testling": {
    "files": "test/*.js",
    "browsers": [
      "iexplore/6.0",
      "iexplore/7.0",
      "iexplore/8.0",
      "iexplore/9.0",
      "iexplore/10.0",
      "chrome/4.0",
      "chrome/23.0",
      "firefox/3.0",
      "firefox/17.0",
      "opera/10.0",
      "opera/12.0",
      "safari/5.0.5",
      "safari/5.1"
    ],
    "harness": "mocha"
  },
  "keywords": [
    "rational numbers",
    "rationals",
    "rational arithmetic",
    "dividing with zero",
    "infinity",
    "origo",
    "numbers"
  ],
  "author": {
    "name": "ashnur"
  },
  "license": "DAFUQ",
  "readmeFilename": "README.md",
  "readme": "# rationals\n_extended rational number type for javascript_\n\nWhy I think this lib is great:\n\n- Representing fractions is not just easy, but it's natural. This is what\nrational numbers do best. Operations like `0.1 + 0.2` are a pain in js,\nbut using rational numbers, it's just: `r(1,10).plus(1,5) === r(3,10)`\n\n- This lib provides a type of object which will work with 1/0 or 0/0 just as well.\nThis is especially useful if you plan to plot values on a graph.\n\nI've got the inspiration for this lib from here: [MF105: The extended rational numbers in practice](http://www.youtube.com/watch?v=YMQkLojL2ek)\n\n# Support\n[![browser support](https://ci.testling.com/ashnur/rationals.png)](https://ci.testling.com/ashnur/rationals)\n\n\n\n\n# Examples\n```\nvar r = require('rationals');\n\n// denominator of 1 is optional\nr(1) === r(1); // true\n\nr(1,1) === r(1); // true\n\n// all rationals will be always reduced\nr(2,4) === r(13,26); // true\n\nr(100,50) === r(2); // true\n\n// chaining works\nr(1,2).plus(r(1,3)).minus(r(1,4)).times(r(1,5)).per(r(1,6)) === r(49,70); // true\n\n// my personal favorite aproximation of Pi, from ancient china\nr(355,113).val(); // 3.1415929203539825\n\n// you can give floats and they will be converted into rationals\nrats(0.4,0.1) == rats(4);\n\n```\n\n# API\n- _a & b are objects created with the rationals() function_\n- in the parentheses you have some common aliases for the methods\n\n\n#### Addition\n- add _(plus)_\n\n    `a.add(b)`\n\n#### Subtraction\n- subtract _(minus, sub)_\n\n    `a.sub(b)`\n\n#### Multiplication\n- multiply _(times, mul)_\n\n    `a.mul(b)`\n\n#### Division\n- divide _(per, div)_\n\n    `a.div(b)`\n\n#### Examining\n- toString\n\n    Examining an object can be hard, but if you cast it to a string: `r(355,113)+''` will return `'355/113'`.\n\n    So `r(625,125).toString()` will return `'5/1'`.\n\n#### Display\n- display\n\n    Just like toString(), but the numerator will be shown only if it's not 1.\n    That is, integers will appear without a slash symbol and a denominator.\n\n    `r(625,125).display()` returns `'5'`.\n\n#### Approximation\n- val _(value)_\n\n    Will return the numerator divided with the denominator.\n\n    `r(355,113).val(); //3.1415929203539825`\n\n#### Ordering\n- compare _(value)_\n\n    Will return -1, 0 or 1 if the rational is smaller, equal or larger than the rational it is compared to\n\n    `r(-999,605).compare(R(272,835)) // -1`\n    `r(-966,743).compare(R(-632,198)) // 1`\n    `r(-3,9).compare(R(12,-36)) // 0`\n\n#### Compare absolute values\n- compareAbs _(value)_\n\n    Same as compare but without signs.\n\n    `r(-999,605).compareAbs(R(272,835)) // 1`\n\n# Good to know\nIf you provide anything else as the numerator, than an integer, float or a numerica string an exception will be thrown.\nOn the other hand, if you do the same with the denominator, it will be cast to 1. This is because\nI am lazy, and I do not want to handle wrong values and undefined values differently throwing for the former\nand casting to 1 for the latter.\n\n# Install\n```\nnpm install rationals\n```\n\n**You can use it in the browser with [browserify](http://browserify.org/)**\n",
  "_id": "rationals@0.1.9",
  "dist": {
    "shasum": "1cd114f7180d55e50fe18dd265a864b08b667676",
    "tarball": "http://registry.npmjs.org/rationals/-/rationals-0.1.9.tgz"
  },
  "_from": "rationals@>=0.1.2 <0.2.0",
  "_npmVersion": "1.3.11",
  "_npmUser": {
    "name": "ashnur",
    "email": "ashnur@gmail.com"
  },
  "maintainers": [
    {
      "name": "ashnur",
      "email": "ashnur@gmail.com"
    }
  ],
  "directories": {},
  "_shasum": "1cd114f7180d55e50fe18dd265a864b08b667676",
  "_resolved": "https://registry.npmjs.org/rationals/-/rationals-0.1.9.tgz"
}
