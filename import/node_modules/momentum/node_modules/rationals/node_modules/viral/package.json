{
  "name": "viral",
  "description": "As simple as JS OO can be; in a tiny package",
  "version": "0.0.4",
  "main": "viral.js",
  "scripts": {
    "test": "npm run build; mocha",
    "prepublish": "npm test",
    "build": "./node_modules/uglify-js/bin/uglifyjs viral.js -m > viral.min.js"
  },
  "devDependencies": {
    "uglify-js": "2.2.5",
    "mocha": "1.8.1"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/hughfdjackson/viral.git"
  },
  "testling": {
    "files": "test/*-test.js",
    "browsers": [
      "iexplore/6.0",
      "iexplore/7.0",
      "iexplore/8.0",
      "iexplore/9.0",
      "iexplore/10.0",
      "chrome/4.0",
      "chrome/23.0",
      "firefox/3.0",
      "firefox/17.0",
      "opera/10.0",
      "opera/12.0",
      "safari/5.0.5",
      "safari/5.1"
    ],
    "harness": "mocha"
  },
  "keywords": [
    "oo",
    "prototypal",
    "prototype"
  ],
  "author": {
    "name": "hughfdjackson"
  },
  "license": "BSD",
  "readme": "# Viral\n\nViral is a tiny, pure prototypal OO library for javascript; taking the best parts of [boo](https://github.com/killdream/boo).\n\n[![browser support](https://ci.testling.com/hughfdjackson/viral.png)](https://ci.testling.com/hughfdjackson/viral)\n\n## Why\n\nThe most consistent, easiest way to OO in javascript is pure prototypally - and Viral makes this a snap (and packs a tiny punch in the process - < 0.5kb minified).\n\n## API\n\nViral is a simple base object with two methods:\n\n### .extend\n\n.extend creates an object that inherits from the object on which it's called, and copies any\nproperties passed to .extend into that new object:\n\n```javascript\nvar Person = Viral.extend({\n\tinit: function(firstName, lastName){\n\t\tthis.firstName = firstName\n\t\tthis.lastName = lastName\n\t},\n\tfullName: function(){ return this.firstName + this.lastName }\n})\n\n// extend is inherited by Person, so we can extend further:\nvar Coder = Person.extend({\n\tlikesCode: true\n})\n```\n\nBecause Viral uses pure prototypal inheritance - objects inheriting directly from objects - Coder and Person are just objects like any other:\n\n```javascript\nconsole.log(Person)\n\n//  {\n//  \tinit: [Function],\n//  \tfullName: [Function]\n//  }\n\nconsole.log(Coder)\n\n//  {\n//  \tinit: [Function],\n//  \tfullName: [Function],\n//  \tlikesCode: true\n//  }\n```\n\n### .make\n\n.make creates an object that inherits from the object on which it's called, and calls the init method\nof this new object with any arguments you pass in.\n\n\n```javascript\n// using Coder from the above example:\nvar hugh = Coder.make('hugh', 'jackson')\n\nhugh.fullName() //= 'hugh jackson'\nhugh.likesCode  //= true\n```\n\n## Install\n\n### node\n\n`npm install viral`, then require:\n\n```javascript\nvar Viral = require('viral')\n\n// use `Viral` here\n```\n\n### browser\n\ninclude as a script tag:\n\n```html\n<!doctype html>\n<html>\n\t<head></head>\n\t<body>\n\t\t<script src=\"libs/viral.min.js\"></script>\n\t\t<script>\n\t\t// use `Viral` here\n\t\t</script>\n\t</body>\n</html>\n```\n\n### requirejs\n\ninclude as a script.  e.g., from the libs/ folder:\n\n```javascript\nrequire(['libs/viral.min'], function(Viral){\n\t// use `Viral` here\n})\n```\n",
  "readmeFilename": "README.markdown",
  "_id": "viral@0.0.4",
  "dist": {
    "shasum": "624f3c0bd9a954d83ece9707aa5f94000ff1102b",
    "tarball": "http://registry.npmjs.org/viral/-/viral-0.0.4.tgz"
  },
  "_from": "viral@>=0.0.4 <0.1.0",
  "_npmVersion": "1.2.2",
  "_npmUser": {
    "name": "hughfdjackson",
    "email": "hughfdjackson@googlemail.com"
  },
  "maintainers": [
    {
      "name": "hughfdjackson",
      "email": "hughfdjackson@googlemail.com"
    }
  ],
  "directories": {},
  "_shasum": "624f3c0bd9a954d83ece9707aa5f94000ff1102b",
  "_resolved": "https://registry.npmjs.org/viral/-/viral-0.0.4.tgz"
}
